name: Salesforce Deployment
on:
  push:
    branches:
      - master

env:
  SF_AUTOUPDATE_DISABLE: true
  SF_USE_GENERIC_UNIX_KEYCHAIN: true

jobs:
  Salesforce_Deployment:
    runs-on: ubuntu-latest
    timeout-minutes: 200
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16' # Update Node.js to version 16

      - name: Install Salesforce CLI
        run: |
          echo "Installing Salesforce CLI..."
          npm install -g @salesforce/cli

      - name: Authorize SF Org
        env:
          CLIENT_ID: ${{ secrets.SALESFORCEPRODCLIENTID }}
          USERNAME: ${{ secrets.SALESFORCEPRODUSERNAME }}
          INSTANCE_URL: ${{ secrets.SALESFORCEPRODINSTANCEURL }}
        run: |
          # Authenticate with the Salesforce Dev Org using JWT
          echo "Authenticating with Salesforce..."
          sf login org jwt --username $USERNAME --client-id $CLIENT_ID --jwt-key-file ./assets/server.key --instance-url $INSTANCE_URL
          
      - name: Validate and Deploy Salesforce Project
        run: |
          # Validate the Salesforce project using the manifest/package.xml
          echo "Starting Salesforce project validation..."
          validationResult=$(sf deploy metadata validate --manifest ./manifest/package.xml --target-org $USERNAME --json)
          echo "Raw Validation Result:"
          echo $validationResult | jq '.'  # Pretty print the JSON

          jobId=$(echo $validationResult | jq -r ".result.id")

          # If jobId is null or empty, print raw output for debugging
          if [ -z "$jobId" ]; then
              echo "Unexpected result from validation initiation."
              exit 1
          fi

          # Monitor the validation status until it's complete
          isComplete="false"
          while [ "$isComplete" == "false" ]; do
              sleep 10
              statusResult=$(sf deploy metadata report --job-id $jobId --json)
              isComplete=$(echo $statusResult | jq -r ".result.done")
              status=$(echo $statusResult | jq -r ".result.status")
              echo "Validation Status: $status"
              
              # Check if status is null and break out of the loop
              if [ "$status" == "null" ]; then
                  echo "Error: Unexpected null status from Salesforce CLI."
                  echo "Full Status Result:"
                  echo $statusResult | jq '.'
                  exit 1
              fi
          done

          # Handle different validation statuses and display detailed error messages
          if [ "$status" != "Succeeded" ]; then
              echo "Error: Validation failed with status: $status"
              echo "Detailed Error:"
              echo $statusResult | jq -r ".result.details.componentFailures" | jq '.'  # Pretty print the JSON
              exit 1
          fi

          # Proceed with deployment
          echo "Deploying Salesforce project..."
          deploymentResult=$(sf deploy metadata --manifest ./manifest/package.xml --target-org $USERNAME --json)
          deploymentStatus=$(echo $deploymentResult | jq -r ".result.status")

          if [ "$deploymentStatus" == "null" ]; then
              echo "Error: Unexpected null status from Salesforce CLI during deployment."
              echo "Full Deployment Result:"
              echo $deploymentResult | jq '.'
              exit 1
          elif [ "$deploymentStatus" != "Succeeded" ]; then
              echo "Error: Deployment failed with status: $deploymentStatus"
              echo "Detailed Error:"
              echo $deploymentResult | jq -r ".result.details.componentFailures" | jq '.'  # Pretty print the JSON
              exit 1
          fi

          echo "Deployment Status: $deploymentStatus"
          echo "Deployment complete."
